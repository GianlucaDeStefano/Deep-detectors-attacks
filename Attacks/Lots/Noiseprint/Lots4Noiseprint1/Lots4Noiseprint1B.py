
import numpy as np

from Attacks import LotsNoiseprint1
from Ulitities.Image.Picture import Picture


class LotsNoiseprint1B(LotsNoiseprint1):
    name = "LOTS4Noiseprint1B"

    def __init__(self, objective_image: Picture, objective_mask: Picture, target_representation_image: Picture = None,
                 target_representation_mask: Picture = None, qf: int = None,
                 patch_size: tuple = (16, 16), padding_size=(0, 0, 0, 0),
                 steps=50, debug_root="./Data/Debug/", alpha=5, plot_interval=3,verbose=True):
        """
        Base class to implement various attacks
        :param objective_image: image to attack
        :param objective_mask: binary mask of the image to attack, 0 = authentic, 1 = forged
        :param image_path: path to the image's file
        :param mask_path: path to the image's mask's file
        :param qf: quality factor to use
        :param patch_size: size of the patch ot use to generate the target representation
        :param steps: total number of steps of the attack
        :param debug_root: root dolder in which save debug data generated by the attack
        """

        assert (len(padding_size) == 4)

        # Define the dimension of the padding to apply to the patch before od using noiseprint
        self.padding_size = padding_size

        # convert targt image to be float
        objective_image = objective_image.astype(np.float)

        super().__init__(objective_image, objective_mask, target_representation_image,
                 target_representation_mask, qf,
                 patch_size,padding_size,
                 steps, debug_root, alpha, plot_interval,verbose)


