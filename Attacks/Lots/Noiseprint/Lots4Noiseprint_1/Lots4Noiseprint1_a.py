import logging
import os

import numpy as np
from matplotlib import pyplot as plt
from tqdm import tqdm
import tensorflow as tf

from Attacks.Lots.Noiseprint.Lots4NoiseprintBase import Lots4NoiseprintBase
from Attacks.utilities.image import three_2_one_channel, normalize_noiseprint_no_margins, one_2_three_channel
from Attacks.utilities.patches import get_authentic_patches, divide_in_patches, scale_patch
from Attacks.utilities.visualization import visuallize_array_values


class LotsNoiseprint1_a(Lots4NoiseprintBase):

    def __init__(self, target_image: np.array, mask: np.array, image_path, mask_path, qf: int = None,
                 patch_size: tuple = (16, 16),
                 steps=50, debug_root="./Data/Debug/",alpha=5, plot_interval=1):
        """
        Base class to implement various attacks
        :param target_image: image to attack
        :param mask: binary mask of the image to attack, 0 = authentic, 1 = forged
        :param image_path: path to the image's file
        :param mask_path: path to the image's mask's file
        :param qf: quality factor to use
        :param patch_size: size of the patch ot use to generate the target representation
        :param steps: total number of steps of the attack
        :param debug_root: root dolder in which save debug data generated by the attack
        """

        super().__init__(target_image, mask, "LOTS4Noiseprint_1.a", image_path, mask_path, qf, patch_size, steps,
                         debug_root, alpha,plot_interval)

    def _generate_target_representation(self):
        """
        Generate the target representation executing the following steps:

            1) Divide the image into patches
            2) Select only the authentic patches
            3) Foreach patch compute its noiseptint
            4) Average all the noiseprint maps

        :return: the target representation in the shape of a numpy array
        """

        image = self.target_image

        if len(image.shape) == 3 and image.shape[2] == 3:
            image = three_2_one_channel(image)

        # exctract the authentic patches from the image
        authentic_patches = get_authentic_patches(image, self.mask, self.patch_size, True)

        # create target patch object
        target_patch = np.zeros(self.patch_size)

        # generate authentic target representation
        self.write_to_logs("Generating target representation...", logging.INFO)
        for x_index, y_index, patch in tqdm(authentic_patches):
            assert (patch.shape == target_patch.shape)

            patch = np.squeeze(self._engine._model(patch[np.newaxis, :, :, np.newaxis]))

            target_patch += patch / len(authentic_patches)

        self.write_to_logs("Target representation generated", logging.INFO)
        self.target_representation = target_patch

        # save a visualization of the target representation
        normalized_noiseprint = normalize_noiseprint_no_margins(self.target_representation)

        plt.imsave(fname=os.path.join(self.debug_folder, "image-target.png"), arr=normalized_noiseprint, cmap='gray',
                   format='png')

        visuallize_array_values(self.target_representation, os.path.join(self.debug_folder, "image-target-raw.png"))
        return self.target_representation

    def _attack_step(self):
        """
        Perform step of the attack executing the following steps:

            1) Divide the entire image into patches
            2) Compute the gradient of each patch with respect to the patch-tirget representation
            3) Recombine all the patch-gradients to obtain a image wide gradient
            4) Apply the image-gradient to the image
            5) Convert then the image to the range of values of integers [0,255] and convert it back to the range
               [0,1]
        :return:
        """

        attacked_image_1c = three_2_one_channel(self.attacked_image)

        # divide the image into patches
        img_patches = divide_in_patches(attacked_image_1c, self.patch_size, False)

        # variable to store the cumulative loss across all patches
        cumulative_loss = 0

        # image wide gradient
        image_gradient = np.zeros(attacked_image_1c.shape)

        # analyze the image patch by patch
        pbar = img_patches

        for x_index, y_index, patch in tqdm(pbar):
            # compute the gradient on the given patch
            with tf.GradientTape() as tape:
                tensor_patch = tf.convert_to_tensor(patch[np.newaxis, :, :, np.newaxis])
                tape.watch(tensor_patch)

                # perform feed foward pass
                patch_noiseprint = tf.squeeze(self._engine._model(tensor_patch))

                target_patch_representation = np.copy(self.target_representation)

                if target_patch_representation.shape != patch.shape:
                    target_patch_representation = target_patch_representation[:patch.shape[0], :patch.shape[1]]
                    continue

                # compute the loss with respect to the target representation
                loss = tf.nn.l2_loss(target_patch_representation - patch_noiseprint)

                # retrieve the gradient of the patch
                patch_gradient = np.squeeze(tape.gradient(loss, tensor_patch).numpy())

                cumulative_loss += loss.numpy()

                # check that the retrieved gradient has the correct shape
                assert (patch_gradient.shape == patch.shape)

                # Add the contribution of this patch to the image wide gradient
                image_gradient += scale_patch(patch_gradient, image_gradient.shape, x_index, y_index)

        # save loss value to plot it
        self.loss_steps.append(cumulative_loss)

        # scale the final gradient using the computed infinity norm
        image_gradient = image_gradient / np.max(np.abs(image_gradient))

        # scale the gradient
        image_gradient = self.alpha * image_gradient

        # convert the image from float to int, to round pixels
        forged_image = np.array(self.attacked_image * 255 - one_2_three_channel(image_gradient)).clip(0, 255).astype(
            np.uint8)

        # convert it back to float to perform the next attack step
        self.attacked_image = np.array(forged_image / 255).astype(np.float32)

        self.adversarial_noise += self.attacked_image - self.target_image

    def _on_before_attack_step(self):
        """
        Check that the attack can be executed, if not, generate a target representation
        and execute it
        :return:
        """

        # if no target representation is present, generate it
        if self.target_representation is None:
            self._generate_target_representation()

        super()._on_before_attack_step()
