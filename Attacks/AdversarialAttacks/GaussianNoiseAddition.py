import argparse
from abc import ABC, abstractmethod
from typing import Type

import numpy as np

from Attacks.BaseAttack import BaseAttack
from Ulitities.Image.Picture import Picture
from Ulitities.Visualizers.BaseVisualizer import BaseVisualizer


class GaussianNoiseAdditionAttack(BaseAttack):

    name = "BaseLotsAttack"

    def __init__(self, objective_image: Picture, objective_mask: Picture,
                 debug_root="./Data/Debug/", verbose=True, mean=0, standard_deviation=1):
        """
        Base class to implement various attacks
        :param objective_image: image to attack
        :param objective_mask: binary mask of the image to attack, 0 = authentic, 1 = forged
        :param name: name to identify the attack
        :param patch_size: size of the patch ot use to generate the target representation
        :param steps: total number of steps of the attack
        :param debug_root: root dolder in which save debug data generated by the attack
        """

        self.mean = mean
        self.standard_deviation = standard_deviation

        super().__init__(objective_image, objective_mask, debug_root, verbose)

    def _on_before_attack(self):
        super()._on_before_attack()

        self.write_to_logs("Mean:{}".format(str(self.mean)))
        self.write_to_logs("Standard deviation:{}".format(str(self.standard_deviation)))

    def _attack(self):
        self.noise = np.random.normal(self.mean, self.standard_deviation, size=self.original_objective_image.shape)
        return Picture(self.original_objective_image + self.noise)

    @staticmethod
    def read_arguments(dataset_root) -> dict:
        """
        Read arguments from the command line or ask for them if they are not present, validate them raising
        an exception if they are invalid, it is called by the launcher script
        :param args: args dictionary containing the arguments passed while launching the program
        :return: kwargs to pass to the attack
        """
        kwarg = BaseAttack.read_arguments(dataset_root)

        parser = argparse.ArgumentParser()
        parser.add_argument("-m", '--mean', default=None, type=float, help='Mean of the gaussian noise distribution')
        parser.add_argument("-s", '--standard_deviation', default=None, type=float, help='Standard deviation of the '
                                                                                      'gaussian noise distribution')

        args = parser.parse_known_args()[0]

        if args.mean is None:
            args.mean = float(input("Input the mean of the Gaussian distribution: "))

        if args.standard_deviation is None:
            args.standard_deviation = float(input("Input the sd of the Gaussian distribution: "))

        kwarg["mean"] = args.mean
        kwarg["standard_deviation"] = args.standard_deviation
        return kwarg
